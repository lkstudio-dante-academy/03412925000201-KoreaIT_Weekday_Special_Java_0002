package Example.Example_27;

/*
 * MVC (Model View Controller) 패턴이란?
 * - 프로그램 구조를 설계하는 방법 중 하나로서 모델 (데이터) 와 뷰 (UI) 를 서로 분리하고 이를
 * 컨트롤러 (Controller) 로 제어함으로서 모델과 뷰의 재사용성을 높이는 설계 방식을 의미한다. (+
 * 즉, MVC 패턴은 모델과 뷰의 결합도를 낮추는게 핵심이라는 것을 알 수 있다.)
 *
 * 뷰 (View) 란?
 * - 사용자에게 보여지는 화면 or 출력 결과를 담당하는 구성 요소를 의미한다. (+ 즉, 뷰는 사용자와 직접적으로
 * 상호 작용하는 요소라는 것을 알 수 있다.)
 *
 * 모델 (Model) 이란?
 * - 사용자에게 보여 줄 데이터를 처리하는 구성 요소를 의미한다. (+ 즉, 모델은 뷰를 통해 사용자에게
 * 노출 된다는 것을 알 수 있다.)
 *
 * 컨트롤러 (Controller) 이란?
 * - 모델과 뷰가 서로 상호 작용을 할 수 있게 중재하는 구성 요소를 의미한다. (+ 즉, 컨트롤러는 모델과 뷰에 대한
 * 결합도가 높기 때문에 일반적으로 재사용이 힘들다는 것을 알 수 있다.)
 *
 * 뷰를 통해 입력 된 사용자의 요구 사항은 컨트롤러를 거쳐 모델에 전달 되며 모델은 사용자의 요구 사항에 맞게
 * 데이터를 처리한다.
 *
 * 이후 처리가 완료 된 데이터는 다시 컨트롤러를 거쳐서 뷰에 전달된다. (+ 즉, 모델과 뷰는 서로 독립적으로
 * 동작한다는 것을 알 수 있다.)
 */

/**
 * Example 30 (MVC 패턴)
 */
public class CE01Example_27 {
	/** 초기화 */
	public static void start(String[] args) {
		CApp oApp = new CApp(480, 320);
		oApp.run();
	}
}
