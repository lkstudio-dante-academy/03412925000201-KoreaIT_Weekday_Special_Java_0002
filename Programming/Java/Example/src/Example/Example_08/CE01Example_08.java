package Example.Example_08;

/*
 * 배열 (Array) 이란?
 * - 동일한 자료형의 데이터를 여러 개 관리 할 수 있는 기능을 의미한다. (+ 즉, 배열을 활용하면 여러 데이터를
 * 좀 더 수월하게 관리하는 것이 가능하다.)
 *
 * 변수는 1 개의 데이터만 관리하는 것이 가능하기 때문에 관리 하고 싶은 데이터가 많을 경우 해당 데이터를
 * 모두 변수로 관리하는 것은 비효율적이다. (+ 즉, 100 개의 데이터를 관리 할려면 100 개의 변수를
 * 선언해야 한다는 것을 의미한다.)
 *
 * 따라서 대부분의 프로그래밍 언어는 데이터를 여러 개 관리 할 수 있는 기능을 제공하며
 * 그 중 가장 기본이 되는 것이 배열이다. (+ 즉, 배열은 대부분의 프로그래밍 언어에서 지원 한다는 것을
 * 알 수 있다.)
 *
 * Java 에서 배열은 클래스이기 때문에 참조 형식 자료형에 포함 된다. (+ 즉, 배열을 참조하는 변수를
 * 다른 배열 변수에 할당하면 얕은 복사가 이루어진다는 것을 알 수 있다.)
 *
 * Java 배열 선언 방법
 * - 자료형 + 배열 이름 + 배열 길이 (크기)
 *
 * Ex)
 * int[] oValues = new int[5];
 * oValues[0] = 10;
 *
 * 위와 같이 배열을 생성 할 때 관리 할 데이터의 개수를 명시해주는 것으로
 * 간단하게 여러 데이터를 관리하는 것이 가능하다.
 *
 * 배열이 관리하는 각 데이터는 요소 (Element) 라고 불리며 배열이 관리하는 특정 요소에 접근하기 위해서는
 * [] (인덱스 연산자) 와 인덱스 번호가 사용된다.
 *
 * 인덱스 번호의 범위는 0 ~ 배열 길이 - 1 이기 때문에 인덱스 번호를 명시 할 때 주의 할 필요가 있다. (+ 즉,
 * 잘못 된 인덱스 번호를 명시하면 내부적으로 예외가 발생 한다는 것을 알 수 있다.)
 *
 * 인덱스 번호의 시작이 0 인 이유
 * - 인덱스 번호는 배열이 관리하는 첫 요소에서 얼만큼 떨어져 있는지에 대한 간격의 의미이기 때문에
 * 1 이 아니라 0 부터 시작 한다는 것을 알 수 있다. (+ 즉, 인덱스 번호 0 의 의미는 첫 요소로부터
 * 0 칸 떨어져 있다는 것을 의미한다.)
 */

/**
 * Example 8 (배열)
 */
public class CE01Example_08 {
	/** 초기화 */
	public static void start(String[] args) {
		/*
		 * new 키워드란?
		 * - 대상을 생성하는 역할을 수행하는 키워드를 의미하며 참조 형식 자료형에만 명시하는 것이 가능하다.
		 * (+ 즉, 값 형식 자료형에는 사용하는 것이 불가능하다는 것을 의미한다.)
		 *
		 * new 키워드는 명시 된 자료형의 데이터를 관리 할 수 있는 대상을 생성 후
		 * 해당 대상을 참조 할 수 있는 참조 값이 반환 되는 특징이 존재한다.
		 *
		 * Ex)
		 * int[] oValues = new int[5];
		 *
		 * 위와 같이 new 키워드를 활용하면 정수 데이터 5 개를 관리 할 수 있는 배열을 생성 후
		 * 해당 배열을 참조 할 수 있는 참조 값을 oValues 변수에 할당하는 것이 가능하다.
		 */
		int[] oValuesA = new int[5];
		oValuesA[0] = 1;
		oValuesA[1] = 2;
		oValuesA[2] = 3;
		oValuesA[3] = 4;
		oValuesA[4] = 5;
		
		int[] oValuesB = {
				1, 2, 3, 4, 5
		};
		
		System.out.println("=====> 1 차원 배열 - A <=====");
		
		/*
		 * 아래와 같이 length 변수를 활용하면 배열의 길이를 가져오는 것이 가능하다. (+ 즉,
		 * length 를 활용하면 배열이 관리 할 수 있는 데이터의 개수를 알 수 있다.)
		 */
		for(int i = 0; i < oValuesA.length; ++i) {
			System.out.printf("%d, ", oValuesA[i]);
		}
		
		System.out.println("\n\n=====> 1 차원 배열 - B <=====");
		
		/*
		 * foreach 반복문이란?
		 * - 열거 가능한 데이터에만 사용 가능한 반복문으로서 열거 가능한 데이터 내부에 존재하는 모든 요소를
		 * 차례대로 방문하기 때문에 순회문이라고 불린다.
		 *
		 * Ex)
		 * int[] oValues = {
		 * 		1, 2, 3, 4, 5
		 * };
		 *
		 * for(int nVal : oValues) {
		 * 		// Do Something
		 * }
		 *
		 * 위의 경우 foreach 반복문은 반복을 할 때마다 oValues 내부에 존재하는 요소를
		 * 차례대로 가져와서 nVal 변수에 할당 해주며 더이상 할당 할 요소가 없을 경우 자동으로 반복이
		 * 종료 되는 특징이 존재한다. (+ 즉, 의도치 않게 무한 루프에 빠질 가능성이 현저히 적다는 것을
		 * 알 수 있다.)
		 */
		for(int nVal : oValuesB) {
			System.out.printf("%d, ", nVal);
		}
		
		/*
		 * 다차원 배열이란?
		 * - 하위 차원의 배열을 요소로 하는 배열을 의미한다. (+ 즉, 2 차원 배열은 1 차원 배열을
		 * 요소로 한다는 것을 알 수 있다.)
		 *
		 * Ex)
		 * int[][] oMatrix = new int[2][2];
		 * oMatrix[0][0] = 10;
		 *
		 * 위와 같이 oMatrix 는 길이가 2 인 1 차원 배열을 2 개 제어 할 수 있는 2 차원 배열이라는 것을
		 * 알 수 있다.
		 *
		 * 따라서 2 차원 배열이 관리하는 정수에 접근하기 위해서는 [] (인덱스 연산자) 와 인덱스 번호를
		 * 2 번 명시해야 한다는 것을 알 수 있다. (+ 즉, 3 차원 배열이라는 3 번 명시해야한다는 것을
		 * 의미한다.)
		 */
		int[][] oMatrixA = new int[2][2];
		oMatrixA[0][0] = 1;
		oMatrixA[0][1] = 2;
		oMatrixA[1][0] = 3;
		oMatrixA[1][1] = 4;
		
		int[][] oMatrixB = {
				{ 1, 2 },
				{ 3, 4 }
		};
		
		System.out.println("\n\n=====> 2 차원 배열 - A <=====");
		
		for(int i = 0; i < oMatrixA.length; ++i) {
			for(int j = 0; j < oMatrixA[i].length; ++j) {
				System.out.printf("%d, ", oMatrixA[i][j]);
			}
			
			System.out.println();
		}
		
		System.out.println("\n=====> 2 차원 배열 - B <=====");
		
		/*
		 * 아래와 같이 다차원 배열에도 foreach 반복문을 활용하는 것이 가능하다.
		 */
		for(int[] oValues : oMatrixB) {
			for(int nVal : oValues) {
				System.out.printf("%d, ", nVal);
			}
			
			System.out.println();
		}
	}
}
