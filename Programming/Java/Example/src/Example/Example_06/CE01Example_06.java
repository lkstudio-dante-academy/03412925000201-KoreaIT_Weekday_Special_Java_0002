package Example.Example_06;

/*
 * 반복문이란?
 * - 조건을 만족 할 동안 명령문의 일부 or 전체를 반복해서 실행 시키는 기능을 의미한다. (+ 즉,
 * 반복문을 활용하면 프로그램의 흐름을 특정 구간에 잡아두는 것이 가능하다.)
 *
 * Java 로 제작 된 프로그램은 메인 메서드가 종료 되면 프로그램도 종료 되기 때문에
 * 영구적으로 실행 되는 프로그램을 제작하기 위해서는 메인 메서드가 종료 되지 않게 프로그램의 흐름을
 * 제어 할 필요가 있다. (+ 즉, 반복문을 활용하면 영구적으로 실행되는 프로그램을 제작하는 것이 가능하다.)
 *
 * Java 반복문 종류
 * - while
 * - for
 * - do ~ while			<- 사후 판단 반복문
 * - foreach			<- 열거 가능 데이터 전용
 *
 * Ex)
 * while(조건문) {
 * 		// Do Something
 * }
 *
 * for(초기절; 조건절; 반복절) {
 * 		// Do Something
 * }
 *
 * do {
 * 		// Do Something
 * } while(조건문)
 *
 * while 계열 반복문 vs for 계열 반복문
 * - while 계열 반복문은 대부분의 프로그래밍 언어에서 지원하는 기본적인 반복문으로서
 * 단순한 문법으로 인해 직관적이지만 실수 할 수 있는 여지가 많다는 단점이 존재한다. (+ Ex. 무한 루프 등등...)
 *
 * 반면 for 계열 반복문은 while 계열 반복문에 비해 문법이 복잡해서 직관성이 떨어지지만
 * while 계열 반복문에 비해 실수 할 수 있는 여지가 적다는 장점이 존재한다.
 *
 * 따라서 대부분의 사용자 (프로그래머) 는 while 계열 반복문보다 for 계열 반복문을 좀 더 선호한다.
 *
 * 단, 모든 상황에서 for 계열 반복문이 적합한 것은 아니며 for 계열 반복문은 반복 할 횟수가
 * 명확 할 때 사용하는 것이 일반적이다. (+ 즉, 반복 할 횟수를 알 수 없을 경우
 * while 계열 반복문이 적합하다는 것을 알 수 있다.)
 *
 * 사전 판단 반복문 vs 사후 판단 반복문
 * - 사전 판단 반복문은 조건을 먼저 검사 후 반복 할 명령문을 실행하기 때문에 처음부터 조건이 거짓이라면
 * 반복 할 명령문이 한번도 실행되지 않는 특징이 존재한다.
 *
 * 반면 사후 판단 반복문은 반복 할 명령문을 먼저 실행 후 조건을 검사하기 때문에 처음부터 조건이 거짓이더라도
 * 한번 이상 반복 할 명령문이 실행되는 차이점이 존재한다. (+ 즉, 사후 판단 반복문은 반복 할 명령문이
 * 반드시 한번은 실행 된다는 것을 알 수 있다.)
 */

import java.util.Scanner;

/**
 * Example 6 (반복문 - 1)
 */
public class CE01Example_06 {
	/** 초기화 */
	public static void start(String[] args) {
		Scanner oScanner = new Scanner(System.in);
		
		System.out.print("횟수 입력 : ");
		int nTimes = oScanner.nextInt();
		
		System.out.println("\n=====> while 반복문 <=====");
		int i = 0;
		
		while(i < nTimes) {
			// 짝수 일 경우
			if((i + 1) % 2 == 0) {
				i += 1;
				
				/*
				 * continue 키워드란?
				 * - 점프문 중 하나로서 프로그램의 현재 흐름을 생략하고 다음 흐름으로 이동 시키는 역할을
				 * 수행하는 키워드를 의미한다.
				 *
				 * while 반복문 내부에 continue 키워드를 명시 할 경우 반복을 종료 시킬 명령문이
				 * 실행 되었는지 항상 주시 할 필요가 있다. (+ 즉, while 문은 반복을 종료 시킬 명령문이
				 * 반복 할 명령문 내부에 존재하기 때문에 해당 명령문을 실행하지 않고 생략하면 무한 루프에
				 * 빠진다는 것을 알 수 있다.)
				 *
				 * 무한 루프란?
				 * - 프로그램의 흐름이 특정 구간을 탈출하지 못하고 잡혀 있는 구조를 의미한다. (+ 즉,
				 * 의도치 않게 무한 루프가 발생하면 프로그램이 오작동 한다는 것을 알 수 있다.)
				 *
				 * 일반적으로 무한 루프가 발생하면 프로그램에 논리적인 에러 (버그) 가 존재 한다는 것을
				 * 의미하지만 필요에 따라 의도적으로 무한 루프 구조를 작성하는 경우도 있다.
				 *
				 * Ex)
				 * int nVal = 0;
				 * Scanner oScanner = new Scanner(System.in);
				 *
				 * while(true) {
				 * 		nVal = oScanner.nextInt();
				 *
				 * 		// 짝수 일 경우
				 * 		if(nVal % 2 == 0) {
				 * 			break;
				 * 		}
				 * }
				 *
				 * 위와 같이 의도적으로 무한 루프 구조를 작성하고 조건문을 통해 무한 루프를 끝낼 수 있도록
				 * 명령문을 작성함으로서 사용자 (프로그래머) 의 의도대로 프로그램이 동작하도록 하는 것이
				 * 가능하다.
				 */
				continue;
			}
			
			System.out.printf("%d, ", i + 1);
			i += 1;
		}
		
		System.out.println("\n\n=====> for 반복문 <=====");
		
		for(i = 0; i < nTimes; ++i) {
			// 짝수 일 경우
			if((i + 1) % 2 == 0) {
				/*
				 * for 반복문은 while 반복문에 비해 continue 키워드를 좀 더 안전하게 사용하는 것이
				 * 가능하다. (+ 즉, continue 키워드에 의해 프로그램의 현재 흐름을 생략하고
				 * 다음으로 이동 하더라도 반복적에 의해 반복문을 종료 시킬 명령문이 실행 된다는 것을
				 * 알 수 있다.)
				 */
				continue;
			}
			
			System.out.printf("%d, ", i + 1);
		}
		
		System.out.println("\n\n=====> do ~ while 반복문 <=====");
		
		do {
			System.out.println("do ~ while 반복문을 실행했습니다.");
		} while(false);
	}
}
