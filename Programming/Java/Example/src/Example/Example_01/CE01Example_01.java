/*
 * 패키지 (Package) 키워드란?
 * - 패키지를 정의하는 역할을 수행하는 키워드를 의미한다. (+ 즉, 패키지 키워드를 활용하면
 * Java 클래스를 특정 패키지 하위에 포함 시키는 것이 가능하다.)
 *
 * Java 에서 패키지는 디렉토리를 의미하기 때문에 패키지에 명시하는 경로는 반드시 파일 시스템 상에 경로와
 * 일치해야한다. (+ 즉, 경로가 일치하지 않으면 컴파일 에러가 발생 한다는 것을 알 수 있다.)
 */
package Example.Example_01;

/*
 * 프로그래밍 언어 (Programming Language) 란?
 * - 컴퓨터에게 작업을 지시하기 위한 프로그램을 제작하기 위한 언어를 의미한다. (+ 즉, 사용자 (프로그래머) 는
 * 프로그래밍 언어를 통해 컴퓨터와 대화가 가능하다는 것을 알 수 있다.)
 *
 * 프로그래밍 언어는 크게 저수준 언어 (Low Level Language) 와 고수준 언어 (High Level Language) 로
 * 구분된다.
 *
 * 저수준 언어 (Low Level Language) 란?
 * - 컴퓨터가 쉽게 읽을 수 있는 언어를 의미한다. (+ 즉, 저수준 언어는 컴퓨터가 이해하기 쉽지만 사람은
 * 이해하기 어렵다는 것을 알 수 있다.)
 *
 * 저수준 언어 종류
 * - 기계어 (Native Code)
 * - 어셈블리어 (Assembly Language)
 *
 * 위와 같이 저수준 언어는 기계어와 어셈블리어가 존재하며 컴퓨터는 기계어만을 이해 할 수 있다. (+ 즉,
 * 어셈블리어는 컴퓨터가 직접적으로 이해 할 수 없다는 것을 의미한다.)
 *
 * 고수준 언어 (High Level Language) 란?
 * - 사람이 쉽게 읽을 수 있는 언어를 의미한다. (+ 즉, 고수준 언어는 컴퓨터가 직접적으로 이해하지 못한다는 것을
 * 알 수 있다.)
 *
 * 고수준 언어 종류
 * - C/C++
 * - C#
 * - Java
 * - Python
 * - 등등...
 *
 * 위와 같이 고수준 언어는 다양한 종류가 존재한다.
 *
 * 단, 고수준 언어는 컴퓨터가 직접적으로 이해하지 못하기 때문에 고수준 언어로 작성 된 명령문을
 * 컴퓨터가 이해할 수 있는 기계어로 변환해 줄 필요가 있으며
 * 이는 컴파일러 (Compiler) or 인터프리터 (Interpreter) 에 의해서 처리된다. (+ 즉,
 * 컴파일러 or 인터프리터는 사용자 (프로그래머) 와 컴퓨터 사이에 존재하는 통역사라는 것을 알 수 있다.)
 *
 * 컴파일러 (Compiler) 란?
 * - 고수준 언어로 제작 된 명령문 전체를 미리 기계어로 변환 해주는 프로그램을 의미하며
 * 컴파일러를 통해 기계어로 변환 되는 언어를 컴파일 언어라고 한다.
 *
 * 인터프리터 (Interpreter) 란?
 * - 고수준 언어로 제작 된 명령문을 실행 중에 기계어로 변환 해주는 프로그램을 의미하며
 * 인터프리터를 통해 기계어로 변환 되는 언어를 스크립트 언어라고 한다.
 *
 * 컴파일러 (Compiler) vs 인터프리터 (Interpreter)
 * - 컴파일러는 고수준 언어로 제작 된 명령문 전체를 미리 기계어로 변환 해주기 때문에 프로그램의 실행 속도가
 * 빠르다는 장점이 존재한다. (+ 즉, 미리 기계어로 변환 된 명령문을 컴퓨터가 읽어 들여서 실행하기 때문에
 * 명령문을 해석하기 위한 시간이 최소화 된다는 것을 알 수 있다.)
 *
 * 단, 컴파일러는 고수준 언어로 제작 된 명령문에 논리적 에러 (버그) 가 존재 할 경우 명령문 전체를
 * 다시 기계어로 변환 해줘야한다. (+ 즉, 명령문 수정이 용이하지 않다는 것을 알 수 있다.)
 *
 * 반면 인터프리터는 프로그램이 실행 중에 고수준 언어로 제작 된 명령문을 기계어로 변환 해주기 때문에
 * 고수준 언어로 제작 된 명령문에 논리적 에러가 존재 할 경우 해당 명령문만 기계어로 변환하면 된다. (+ 즉,
 * 컴파일러보다 명령문 수정이 용이하다는 것을 알 수 있다.)
 *
 * 단, 인터프리터는 실행 중에 고수준으로 제작 된 명령문을 기계어로 변환하기 때문에 프로그램의 실행 속도가
 * 떨어지는 단점이 존재한다. (+ 즉, 명령문을 컴퓨터가 읽어 들여서 실행하는 과정에서
 * 명령문을 해석하기 위한 시간이 필요하다는 것을 알 수 있다.)
 *
 * Java 로 제작 된 프로그램의 동작 원리
 * - Java 는 컴파일 방식과 인터프리터 방식을 모두 지원하는 프로그래밍 언어로서 Java 로 제작 된 명령문은
 * Java 컴파일러를 통해 기계어로 변환 되는 것이 아니라 중간 언어 인 바이트 코드 (Byte Code) 로 변환된다.
 * (+ 즉, Java 로 작성 된 명령문을 바이트 코드로 변환하는 단계에서 컴파일 방식으로 명령문을 변환 한다는 것을
 * 알 수 있다.)
 *
 * 이 후 바이트 코드는 JVM (Java Virtual Machine) 에 의해서 실행 중에 기계어로 변환된다. (+ 즉,
 * Java 로 제작 된 프로그램은 컴파일 방식과 인터프리터 방식을 모두 지원하며 이러한 방식을
 * JIT (Just In Time) 방식이라고 한다.)
 *
 * JVM (Java Virtual Machine) 이란?
 * - Java 로 제작 된 프로그램을 실행 해주는 환경을 의미한다. (+ 즉, 바이트 코드는 JVM 을 위한
 * 명령문이라는 것을 알 수 있다.)
 *
 * JVM 은 Java 로 제작 된 프로그램과 운영 체제 사이에 위치하며 바이트 코드를
 * 운영 체제에 맞는 명령문으로 변환 해주는 역할을 수행한다. (+ 즉, JVM 이 존재하기 때문에
 * 운영 체제 별로 명령문을 다르게 작성 할 필요가 없다.)
 */

import java.util.Scanner;

/**
 * Example 1 (기초)
 */
public class CE01Example_01 {
	/** 초기화 */
	public static void start(String[] args) {
		/*
		 * System.out 클래스란?
		 * - 콘솔 창에 문장을 출력하는 역할을 수행하는 클래스를 의미한다.
		 * (+ 즉, System.out 클래스를 활용하면 콘솔 창에 다양한 문장을 출력하는 것이 가능하다.)
		 *
		 * System.out.print 메서드 vs System.out.println 메서드
		 * - 두 메서드 모두 콘솔 창에 문장을 출력하는 역할을 수행한다.
		 *
		 * System.out.print 메서드는 단순히 주어진 문장을 출력하는 반면 System.out.println 메서드는
		 * 주어진 문장을 출력 후 자동으로 개행 처리 해주는 차이점이 존재한다. (+ 즉,
		 * System.out.print 메서드는 명시적으로 개행 처리를 해주지 않으면 이후 동일한 라인에
		 * 문장이 출력 된다는 것을 알 수 있다.)
		 */
		System.out.println("Hello, World!");
		
		/*
		 * Scanner 클래스란?
		 * - 콘솔 창으로부터 데이터를 입력 받는 역할을 수행하는 클래스를 의미한다. (+ 즉,
		 * Scanner 클래스를 활용하면 프로그램과 사용자가 상호 작용하는 것이 가능하다.)
		 *
		 * Scanner 클래스는 콘솔 창으로부터 데이터를 입력 받기 위한 다양한 기능을 제공하며
		 * 해당 클래스를 활용하면 문장을 비롯한 다양한 형식의 데이터를 사용자로부터 입력 받는 것이 가능하다.
		 */
		Scanner oScanner = new Scanner(System.in);
		
		System.out.print("\n문자열 입력 : ");
		System.out.printf("입력 된 문자열 : %s\n", oScanner.nextLine());
	}
}
